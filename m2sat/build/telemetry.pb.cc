// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry.proto

#include "telemetry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR TelemetryMessage::TelemetryMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.omega_b2i_)*/{}
  , /*decltype(_impl_.q_i2b_)*/{}
  , /*decltype(_impl_.q_i2d_)*/{}
  , /*decltype(_impl_.r_mass_)*/{}
  , /*decltype(_impl_.rdot_mass_)*/{}
  , /*decltype(_impl_.r_mass_commanded_)*/{}
  , /*decltype(_impl_.u_com_)*/{}
  , /*decltype(_impl_.u_actual_)*/{}
  , /*decltype(_impl_.nu_top_)*/{}
  , /*decltype(_impl_.nu_bottom_)*/{}
  , /*decltype(_impl_.theta_hat_)*/{}
  , /*decltype(_impl_.omega_d2i_d_)*/{}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TelemetryMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TelemetryMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TelemetryMessageDefaultTypeInternal() {}
  union {
    TelemetryMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TelemetryMessageDefaultTypeInternal _TelemetryMessage_default_instance_;
static ::_pb::Metadata file_level_metadata_telemetry_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_telemetry_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_telemetry_2eproto = nullptr;

const uint32_t TableStruct_telemetry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.omega_b2i_),
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.q_i2b_),
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.q_i2d_),
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.r_mass_),
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.rdot_mass_),
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.r_mass_commanded_),
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.u_com_),
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.u_actual_),
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.nu_top_),
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.nu_bottom_),
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.theta_hat_),
  PROTOBUF_FIELD_OFFSET(::TelemetryMessage, _impl_.omega_d2i_d_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TelemetryMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_TelemetryMessage_default_instance_._instance,
};

const char descriptor_table_protodef_telemetry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017telemetry.proto\"\252\002\n\020TelemetryMessage\022\014"
  "\n\004time\030\001 \001(\004\022\025\n\tomega_b2i\030\002 \003(\001B\002\020\001\022\021\n\005q"
  "_i2b\030\003 \003(\001B\002\020\001\022\021\n\005q_i2d\030\004 \003(\001B\002\020\001\022\022\n\006r_m"
  "ass\030\005 \003(\001B\002\020\001\022\025\n\trdot_mass\030\006 \003(\001B\002\020\001\022\034\n\020"
  "r_mass_commanded\030\007 \003(\001B\002\020\001\022\021\n\005u_com\030\010 \003("
  "\001B\002\020\001\022\024\n\010u_actual\030\t \003(\001B\002\020\001\022\022\n\006nu_top\030\n "
  "\003(\001B\002\020\001\022\025\n\tnu_bottom\030\013 \003(\001B\002\020\001\022\025\n\ttheta_"
  "hat\030\014 \003(\001B\002\020\001\022\027\n\013omega_d2i_D\030\r \003(\001B\002\020\001b\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_telemetry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_telemetry_2eproto = {
    false, false, 326, descriptor_table_protodef_telemetry_2eproto,
    "telemetry.proto",
    &descriptor_table_telemetry_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_telemetry_2eproto::offsets,
    file_level_metadata_telemetry_2eproto, file_level_enum_descriptors_telemetry_2eproto,
    file_level_service_descriptors_telemetry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_telemetry_2eproto_getter() {
  return &descriptor_table_telemetry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_telemetry_2eproto(&descriptor_table_telemetry_2eproto);

// ===================================================================

class TelemetryMessage::_Internal {
 public:
};

TelemetryMessage::TelemetryMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TelemetryMessage)
}
TelemetryMessage::TelemetryMessage(const TelemetryMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TelemetryMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.omega_b2i_){from._impl_.omega_b2i_}
    , decltype(_impl_.q_i2b_){from._impl_.q_i2b_}
    , decltype(_impl_.q_i2d_){from._impl_.q_i2d_}
    , decltype(_impl_.r_mass_){from._impl_.r_mass_}
    , decltype(_impl_.rdot_mass_){from._impl_.rdot_mass_}
    , decltype(_impl_.r_mass_commanded_){from._impl_.r_mass_commanded_}
    , decltype(_impl_.u_com_){from._impl_.u_com_}
    , decltype(_impl_.u_actual_){from._impl_.u_actual_}
    , decltype(_impl_.nu_top_){from._impl_.nu_top_}
    , decltype(_impl_.nu_bottom_){from._impl_.nu_bottom_}
    , decltype(_impl_.theta_hat_){from._impl_.theta_hat_}
    , decltype(_impl_.omega_d2i_d_){from._impl_.omega_d2i_d_}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:TelemetryMessage)
}

inline void TelemetryMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.omega_b2i_){arena}
    , decltype(_impl_.q_i2b_){arena}
    , decltype(_impl_.q_i2d_){arena}
    , decltype(_impl_.r_mass_){arena}
    , decltype(_impl_.rdot_mass_){arena}
    , decltype(_impl_.r_mass_commanded_){arena}
    , decltype(_impl_.u_com_){arena}
    , decltype(_impl_.u_actual_){arena}
    , decltype(_impl_.nu_top_){arena}
    , decltype(_impl_.nu_bottom_){arena}
    , decltype(_impl_.theta_hat_){arena}
    , decltype(_impl_.omega_d2i_d_){arena}
    , decltype(_impl_.time_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TelemetryMessage::~TelemetryMessage() {
  // @@protoc_insertion_point(destructor:TelemetryMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TelemetryMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.omega_b2i_.~RepeatedField();
  _impl_.q_i2b_.~RepeatedField();
  _impl_.q_i2d_.~RepeatedField();
  _impl_.r_mass_.~RepeatedField();
  _impl_.rdot_mass_.~RepeatedField();
  _impl_.r_mass_commanded_.~RepeatedField();
  _impl_.u_com_.~RepeatedField();
  _impl_.u_actual_.~RepeatedField();
  _impl_.nu_top_.~RepeatedField();
  _impl_.nu_bottom_.~RepeatedField();
  _impl_.theta_hat_.~RepeatedField();
  _impl_.omega_d2i_d_.~RepeatedField();
}

void TelemetryMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TelemetryMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TelemetryMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.omega_b2i_.Clear();
  _impl_.q_i2b_.Clear();
  _impl_.q_i2d_.Clear();
  _impl_.r_mass_.Clear();
  _impl_.rdot_mass_.Clear();
  _impl_.r_mass_commanded_.Clear();
  _impl_.u_com_.Clear();
  _impl_.u_actual_.Clear();
  _impl_.nu_top_.Clear();
  _impl_.nu_bottom_.Clear();
  _impl_.theta_hat_.Clear();
  _impl_.omega_d2i_d_.Clear();
  _impl_.time_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double omega_b2i = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_omega_b2i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_omega_b2i(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double q_i2b = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_q_i2b(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_q_i2b(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double q_i2d = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_q_i2d(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_q_i2d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double r_mass = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_r_mass(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_r_mass(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double rdot_mass = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rdot_mass(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_rdot_mass(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double r_mass_commanded = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_r_mass_commanded(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_r_mass_commanded(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double u_com = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_u_com(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 65) {
          _internal_add_u_com(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double u_actual = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_u_actual(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 73) {
          _internal_add_u_actual(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double nu_top = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_nu_top(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 81) {
          _internal_add_nu_top(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double nu_bottom = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_nu_bottom(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 89) {
          _internal_add_nu_bottom(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double theta_hat = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_theta_hat(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 97) {
          _internal_add_theta_hat(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double omega_d2i_D = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_omega_d2i_d(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 105) {
          _internal_add_omega_d2i_d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetryMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TelemetryMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time(), target);
  }

  // repeated double omega_b2i = 2 [packed = true];
  if (this->_internal_omega_b2i_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_omega_b2i(), target);
  }

  // repeated double q_i2b = 3 [packed = true];
  if (this->_internal_q_i2b_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_q_i2b(), target);
  }

  // repeated double q_i2d = 4 [packed = true];
  if (this->_internal_q_i2d_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_q_i2d(), target);
  }

  // repeated double r_mass = 5 [packed = true];
  if (this->_internal_r_mass_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_r_mass(), target);
  }

  // repeated double rdot_mass = 6 [packed = true];
  if (this->_internal_rdot_mass_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_rdot_mass(), target);
  }

  // repeated double r_mass_commanded = 7 [packed = true];
  if (this->_internal_r_mass_commanded_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_r_mass_commanded(), target);
  }

  // repeated double u_com = 8 [packed = true];
  if (this->_internal_u_com_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_u_com(), target);
  }

  // repeated double u_actual = 9 [packed = true];
  if (this->_internal_u_actual_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_u_actual(), target);
  }

  // repeated double nu_top = 10 [packed = true];
  if (this->_internal_nu_top_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_nu_top(), target);
  }

  // repeated double nu_bottom = 11 [packed = true];
  if (this->_internal_nu_bottom_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_nu_bottom(), target);
  }

  // repeated double theta_hat = 12 [packed = true];
  if (this->_internal_theta_hat_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_theta_hat(), target);
  }

  // repeated double omega_d2i_D = 13 [packed = true];
  if (this->_internal_omega_d2i_d_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_omega_d2i_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TelemetryMessage)
  return target;
}

size_t TelemetryMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TelemetryMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double omega_b2i = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_omega_b2i_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double q_i2b = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_q_i2b_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double q_i2d = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_q_i2d_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double r_mass = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_r_mass_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double rdot_mass = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rdot_mass_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double r_mass_commanded = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_r_mass_commanded_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double u_com = 8 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_u_com_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double u_actual = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_u_actual_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double nu_top = 10 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_nu_top_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double nu_bottom = 11 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_nu_bottom_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double theta_hat = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_theta_hat_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double omega_d2i_D = 13 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_omega_d2i_d_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // uint64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TelemetryMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryMessage::GetClassData() const { return &_class_data_; }


void TelemetryMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TelemetryMessage*>(&to_msg);
  auto& from = static_cast<const TelemetryMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TelemetryMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.omega_b2i_.MergeFrom(from._impl_.omega_b2i_);
  _this->_impl_.q_i2b_.MergeFrom(from._impl_.q_i2b_);
  _this->_impl_.q_i2d_.MergeFrom(from._impl_.q_i2d_);
  _this->_impl_.r_mass_.MergeFrom(from._impl_.r_mass_);
  _this->_impl_.rdot_mass_.MergeFrom(from._impl_.rdot_mass_);
  _this->_impl_.r_mass_commanded_.MergeFrom(from._impl_.r_mass_commanded_);
  _this->_impl_.u_com_.MergeFrom(from._impl_.u_com_);
  _this->_impl_.u_actual_.MergeFrom(from._impl_.u_actual_);
  _this->_impl_.nu_top_.MergeFrom(from._impl_.nu_top_);
  _this->_impl_.nu_bottom_.MergeFrom(from._impl_.nu_bottom_);
  _this->_impl_.theta_hat_.MergeFrom(from._impl_.theta_hat_);
  _this->_impl_.omega_d2i_d_.MergeFrom(from._impl_.omega_d2i_d_);
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryMessage::CopyFrom(const TelemetryMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TelemetryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryMessage::IsInitialized() const {
  return true;
}

void TelemetryMessage::InternalSwap(TelemetryMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.omega_b2i_.InternalSwap(&other->_impl_.omega_b2i_);
  _impl_.q_i2b_.InternalSwap(&other->_impl_.q_i2b_);
  _impl_.q_i2d_.InternalSwap(&other->_impl_.q_i2d_);
  _impl_.r_mass_.InternalSwap(&other->_impl_.r_mass_);
  _impl_.rdot_mass_.InternalSwap(&other->_impl_.rdot_mass_);
  _impl_.r_mass_commanded_.InternalSwap(&other->_impl_.r_mass_commanded_);
  _impl_.u_com_.InternalSwap(&other->_impl_.u_com_);
  _impl_.u_actual_.InternalSwap(&other->_impl_.u_actual_);
  _impl_.nu_top_.InternalSwap(&other->_impl_.nu_top_);
  _impl_.nu_bottom_.InternalSwap(&other->_impl_.nu_bottom_);
  _impl_.theta_hat_.InternalSwap(&other->_impl_.theta_hat_);
  _impl_.omega_d2i_d_.InternalSwap(&other->_impl_.omega_d2i_d_);
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TelemetryMessage*
Arena::CreateMaybeMessage< ::TelemetryMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TelemetryMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
